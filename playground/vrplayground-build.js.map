{"version":3,"sources":["node_modules/browser-pack/_prelude.js","playground/objects/cube.js","playground/objects/testscene.js","playground/vrplayground.js","src/basegroup.js","src/plugins/tween.js","src/utils/color.js"],"names":[],"mappings":"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","file":"vrplayground-build.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import BaseGroup from '../../src/basegroup.js';\nimport Tween from '../../src/plugins/tween.js';\n\nexport default class Cube extends BaseGroup {\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     */\n    onCreate() {\n        this._material = this.createMaterial();\n        var mesh = new THREE.Mesh(this.createGeometry(), this._material);\n        this.add(mesh, 'cube');\n        this.group.position.z = -20;\n        this.tweener = new Tween(this);\n\n        document.addEventListener('keyup', (event) => {\n            if (event.keyCode === 32) {\n                var props = {\n                    target: mesh,\n                    duration: 3000\n                };\n                this.tweener.animateColor( 0xff0000, 0x00ff00, props );\n                this.tweener.animatePosition( new THREE.Vector3(0,0,0), new THREE.Vector3(10,6,3), props );\n            }\n        });\n    }\n\n    /**\n     * on render\n     * @param time\n     */\n    onRender(time) {\n        this.group.rotation.y += .01;\n    }\n\n    /**\n     * create globe geometry\n     * @returns {THREE.IcosahedronGeometry}\n     */\n    createGeometry() {\n        return new THREE.CubeGeometry(5, 5, 5, 10, 10);\n    }\n\n    /**\n     * create globe material\n     */\n    createMaterial() {\n        return new THREE.MeshPhongMaterial({\n            color      :  0xff0000,\n            shininess  :  10,\n            shading    :  THREE.FlatShading,\n            transparent: true,\n            opacity    : 1\n        });\n    }\n}\n","import BaseGroup from '../../src/basegroup.js';\nimport Tween from '../../src/plugins/tween.js';\n\nexport default class TestScene extends BaseGroup {\n    /**\n     * on create scene (or earliest possible opportunity)\n     */\n    onCreate() {\n    }\n\n    onJSONSceneLoaded(scene) {\n        super.onJSONSceneLoaded(scene);\n        this._cube = scene.getObjectByName('Box 1');\n        this._sphere = scene.getObjectByName('Sphere 2');\n    };\n\n    /**\n     * on render\n     * @param time\n     */\n    onRender(time) {\n    }\n}\n","import Cube from './objects/cube.js';\nimport TestScene from './objects/testscene.js';\n\nexport default class VRPlaygroundScene {\n    constructor(scene) {\n        scene.onPreRender = this.render;\n\n        scene.addObjects([\n            new Cube(),\n            new TestScene({ scene: './assets/testscene.json' }),\n        ]);\n    }\n\n    render(time) {\n    }\n}\n","export default class BaseGroup {\n    constructor(params) {\n\n        /**\n         * parent group of child objects we will create\n         * @type {THREE.Object3D}\n         * @private\n         */\n        this._group = new THREE.Object3D();\n\n        /** additional render hooks we can add */\n        this._renderHooks = [];\n\n        this._config = params;\n        this.onInitialize(params);\n    }\n\n    /**\n     * get name of group\n     */\n    get name() {\n        return this.constructor.name;\n    }\n\n    /**\n     * overridable methods\n     * leave empty to be a simple abstraction we don't have to call super on\n     * @param scene\n     */\n    onCreate(scene) {};\n    onRender(scene, time) {};\n    onInitialize(params) {};\n    onAssetsLoaded(geometry, material) {};\n    onJSONSceneLoadProgress(progress) {};\n    onJSONSceneLoadError(err) {};\n    onJSONSceneLoaded(scene) { this.add(scene) };\n\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     */\n    create(scene) {\n        this._group.name = this.name;\n        this._sceneCollection = scene;\n        scene.scene.add(this._group);\n\n        if (this._config && this._config.assets) {\n            // todo: determine when to use JSON Loader, OBJ loader, or whatever\n            var loader = new THREE.JSONLoader();\n            loader.load(this._config.assets, (geometry, materials) => {\n                this.onAssetsLoaded(geometry, materials);\n            });\n        }\n\n        if (this._config && this._config.scene) {\n            // todo: determine when to use JSON Loader, OBJ loader, or whatever\n            var loader = new THREE.ObjectLoader();\n            loader.load(this._config.scene, (loaded) => {\n                this.onJSONSceneLoaded(loaded);\n            }, (progress) => {\n                this.onJSONSceneLoadProgress(progress);\n            }, (err) => {\n                this.onJSONSceneLoadError(err);\n            });\n        }\n\n        this.onCreate();\n    }\n\n    /**\n     * add object to scene\n     * @param object\n     */\n    add(object, name) {\n        if (!name) {\n            name = this.name + '-child';\n        }\n        object.name = name;\n        this._group.add(object);\n    }\n\n    addRenderHook(method) {\n        this._renderHooks.push(method);\n    }\n\n    /**\n     * get parent group object\n     * @returns {THREE.Object3D}\n     */\n    get group() {\n        return this._group;\n    }\n\n    /**\n     * get scene\n     * @returns {THREE.Object3D}\n     */\n    get sceneCollection() {\n        return this._sceneCollection;\n    }\n\n    /**\n     * get children of this group\n     * @returns {Array}\n     */\n    get children() {\n        return this._group.children;\n    }\n\n    /**\n     * on prerender scene\n     * @param scene\n     */\n    preRender() {}\n\n    /**\n     * on render scene\n     * @param time\n     */\n    render(time) {\n        for (var c = 0; c < this._renderHooks.length; c++) {\n            this._renderHooks[c].apply(this, [time]);\n        }\n        this.onRender(time);\n    }\n}\n","import Color from '../utils/color.js';\n\nexport default class Tween {\n    constructor(group) {\n        if (!createjs) {\n            throw new Error('CreateJS Tween must be included in your build or linked via script to animate');\n            return;\n        }\n        group.addRenderHook( (scene, time) => this.onRender(scene, time));\n        this.animations = [];\n    }\n\n    /**\n     * animate THREE.js mesh position property\n     * @param {int} from\n     * @param {int} to\n     * @param options\n     */\n    animateColor(from, to, options) {\n        if (typeof from !== 'object') {\n            if (typeof from !== 'number' && from.charAt(0) === '#') {\n                from = Number('0x' + from.substr(1, from.length));\n                from = Color.decToRGB(from);\n            } else {\n                from = Color.decToRGB(from);\n            }\n        }\n\n        if (typeof to !== 'object') {\n            if (typeof to !== 'number' && to.charAt(0) === '#') {\n                to = Number('0x' + to.substr(1, to.length));\n                to = Color.decToRGB(to);\n            } else {\n                to = Color.decToRGB(to);\n            }\n        }\n\n        from = this.populateStartAnimationObject(from, options);\n        from.animation.step.push( (step) => this.animateColorStep(step));\n        this.createTween(to, from, options);\n        this.animations.push(from);\n    }\n\n    /**\n     * animate THREE.js mesh position property\n     * @param {Three.js Vector3} from\n     * @param {Three.js Vector3} to\n     * @param options\n     */\n    animatePosition(from, to, options) {\n        from = { x: from.x, y: from.y, z: from.z };\n        to = { x: to.x, y: to.y, z: to.z };\n        from = this.populateStartAnimationObject(from, options);\n        from.animation.step.push( (step) => this.animatePositionStep(step));\n        this.createTween(to, from, options);\n        this.animations.push(from);\n    }\n\n    /**\n     * create and start animation\n     * @param from\n     * @param to\n     * @param options\n     */\n    animate(from, to, options) {\n        if (!createjs) {\n            throw new Error('CreateJS Tween must be included in your build or linked via script to animate');\n            return;\n        }\n\n        if (!options.step) {\n            throw new Error('Please define a \"step\" property on options to specify a callback for each animation update');\n        }\n\n        from = this.populateStartAnimationObject(from, to);\n        this.createTween(to, from, options);\n        this.animations.push(from);\n    }\n\n    /**\n     * populate animation start object\n     * @param from\n     * @param options\n     * @returns {*}\n     */\n    populateStartAnimationObject(from, options) {\n        from.animation = {};\n        from.animation.animating = true;\n        from.animation.step = [];\n        if (options.step) {\n            from.animation.step.push(options.step);\n        }\n        from.animation.target = options.target;\n        from.animation.loop = options.loop;\n        from.animation.complete = options.complete;\n        return from;\n    }\n\n    /**\n     * create tween\n     * @param to\n     * @param from\n     * @param options\n     * @returns {Tween}\n     */\n    createTween(to, from, options) {\n        createjs.Tween.get(from, options)\n            .to(to, options.duration)\n            .call( function() {\n                if (!this._loop) {\n                    this.animation.animating = false;\n                }\n                if (this.animation.complete) {\n                    this.animation.complete.apply(this, [this]);\n                }\n            });\n    }\n\n    /**\n     * animate step for Three.JS position\n     * @param step\n     */\n    animatePositionStep(step) {\n        step.animation.target.position.set(step.x, step.y, step.z);\n    }\n\n    /**\n     * animate step for Three.JS material color\n     * @param step\n     */\n    animateColorStep(step) {\n        step.animation.target.material.color.setRGB(step.r/255, step.g/255, step.b/255);\n    }\n\n    /**\n     * animate render hook\n     * @param time\n     * @param scene\n     */\n    onRender(scene, time) {\n        var running = [];\n        for (var c = 0; c < this.animations.length; c++) {\n            if (this.animations[c].animation.animating) {\n                running.push(this.animations[c]);\n                for (var d = 0; d < this.animations[c].animation.step.length; d++) {\n                    this.animations[c].animation.step[d].apply(this, [this.animations[c]]);\n                }\n            }\n        }\n        this.animations = running;\n    }\n}\n","export default {\n    /**\n     * turn decimal color to RGB\n     * @param dec\n     * @returns {{r: number, g: number, b: number}}\n     */\n    decToRGB(dec) {\n        var r = (dec >> 16) & 0xff;\n        var g = (dec >> 8)  & 0xff;\n        var b = dec & 0xff;\n        return { r: r, g: g, b: b };\n    },\n\n    RGBToDec(rgb) {\n        return rgb.r << 16 + rgb.g << 16 + rgb.b;\n    }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}